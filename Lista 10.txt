Exercicio A:
# A. near_ten #
# Seja um n não negativo, retorna True se o número está a distância de
# pelo menos dois de um múltiplo de dez. Use a função resto da divisão.
# near_ten(12) -> True
# near_ten(17) -> False
# near_ten(19) -> True
def near_ten(n):
    return True if n%10 <= 2 or 10 - n%10 <= 2 else False


Exercicio B:
# B. lone_sum
# Soma maluca: some os números inteiros a, b, e c
# Se algum número aparecer repetido ele não conta na soma
# lone_sum(1, 2, 3) -> 6
# lone_sum(3, 2, 3) -> 2
# lone_sum(3, 3, 3) -> 0
def lone_sum(a, b, c):
    res = 0
    if a != b and a != c:
        res += a
    if b != a and b != c:
        res += b
    if c != a and c != b:
        res += c
    return res


Exercicio C:
# C. luck_sum #
# Soma três inteiros a, b, c
# Se aparecer um 13 ele não conta e todos os da sua direita também
# lucky_sum(1, 2, 3) -> 6
# lucky_sum(1, 2, 13) -> 3
# lucky_sum(1, 13, 3) -> 1
def lucky_sum(a, b, c):
    res = 0
    for n in [a, b, c]:
        if n == 13:
            break
        res += n
    return res


Exercicio D:
# D. double_char #
# retorna os caracteres da string original duplicados
# double_char('The') -> 'TThhee'
# double_char('AAbb') -> 'AAAAbbbb'
# double_char('Hi-There') -> 'HHii--TThheerree'
def double_char(s):
    res = ""
    for c in s:
        res += c
        res += c
    return res


Exercicio E:
# E. count_hi #
# conta o número de vezes que aparece a string 'hi'
# count_hi('abc hi ho') -> 1
# count_hi('ABChi hi') -> 2
# count_hi('hihi') -> 2
def count_hi(s):
    cnt = 0
    for i in range(0, len(s)):
        if s[i:i+2] == "hi":
           cnt += 1
           i += 1
    return cnt


Exercicio F:
# F. cat_dog #
# verifica se o aparece o mesmo número de vezes 'cat' e 'dog'
# cat_dog('catdog') -> True
# cat_dog('catcat') -> False
# cat_dog('1cat1cadodog') -> True
def cat_dog(s):
    catCnt, dogCnt = 0, 0
    for i in range(0, len(s)):
        if s[i:i+3] == "cat":
           catCnt += 1
           i += 2

    for i in range(0, len(s)):
        if s[i:i+3] == "dog":
           dogCnt += 1
           i += 2
    return True if catCnt == dogCnt else False


Exercicio G:
# G. count_code #
# conta quantas vezes aparece 'code'
# a letra 'd' pode ser trocada por outra qualquer
# assim 'coxe' ou 'coze' também são contadas como 'code'
# count_code('aaacodebbb') -> 1
# count_code('codexxcode') -> 2
# count_code('cozexxcope') -> 2
# cozexxcope
def count_code(s):
    cnt = 0
    for i in range(0, len(s)):
        if is_code(s[i:i+4]):
           cnt += 1
           i += 4
    return cnt

def is_code(s):
    if len(s) < 4:
        return False
    return True if s[0:2] == "co" and s[-1] == "e" else False


Exercicio H:
# H. end_other #
# as duas strings devem ser convertidas para minúsculo via lower()
# depois disso verifique que no final da string b ocorre a string a
# ou se no final da string a ocorre a string b
# end_other('Hiabc', 'abc') -> True
# end_other('AbC', 'HiaBc') -> True
# end_other('abc', 'abXabc') -> True
def end_other(a, b):
    a, b = a.lower(), b.lower()
    return True if a[-len(b):] == b or b[-len(a):] == a else False


Exercicio I:
# I. count_evens
# conta os números pares da lista
# count_evens([2, 1, 2, 3, 4]) -> 3
# count_evens([2, 2, 0]) -> 3
# count_evens([1, 3, 5]) -> 0
def count_evens(nums):
    cnt = 0
    for n in nums:
        if n % 2 == 0:
            cnt += 1
    return cnt


Exercicio J:
# J. sum13 #
# retorna a soma dos números de uma lista
# 13 dá azar, você deverá ignorar o 13 e todos os números à sua direita
# sum13([1, 2, 2, 1]) -> 6
# sum13([1, 1]) -> 2
# sum13([1, 2, 2, 1, 13]) -> 6
# sum13([13, 1, 2, 3, 4]) -> 0
def sum13(nums):
    res = 0
    for n in nums:
        if n == 13:
            break
        res += n
    return res


Exercicio K:
# K. has22 #
# Verifica se na lista de números inteiros aparecem dois 2 consecutivos
# has22([1, 2, 2]) -> True
# has22([1, 2, 1, 2]) -> False
# has22([2, 1, 2]) -> False
def has22(nums):
    for i in range(0, len(nums)-1):
        if nums[i] == 2 and nums[i+1] == 2:
            return True
    return False


Exercicio L:
# L. soma_na_lista #
# Verifica se um número é soma de dois elementos distintos de uma lista
# soma_na_lista(5, [1, 2, 3, 4]) -> True
# soma_na_lista(9, [1, 2, 3, 4]) -> False
# soma_na_lista(0, [1, 2, 3, 4]) -> False
# soma_na_lista(8, [1, 2, 3, 4]) -> False
# soma_na_lista(4, [2, 2, 2, 2]) -> False
# soma_na_lista(4, [2, 2, 1, 3]) -> True
def soma_na_lista(n, lista):
    for na in lista:
        for nb in lista:
            if na != nb and n == na + nb:
                return True
    return False


Exercicio M:
# M.Difícil: Fila de tijolos sem usar loops #
# queremos montar uma fila de tijolos de um tamanho denominado meta
# temos tijolos pequenos (tamanho 1) e tijolos grandes (tamanho 5)
# retorna True se for possível montar a fila de tijolos
# é possível uma solução sem usar for ou while
# fila_tijolos(3, 1, 8) -> True
# fila_tijolos(3, 1, 9) -> False
# fila_tijolos(3, 2, 10) -> True
def fila_tijolos(n_peq, n_gra, meta):
    return True if n_peq + 5 * min(int(meta/5), n_gra) >= meta else False
